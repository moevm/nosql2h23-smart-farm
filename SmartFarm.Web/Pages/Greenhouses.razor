@page "/greenhouses"
<h3>Greenhouses</h3>
<div style="display: flex; flex-direction: column"></div>
<div style="display: flex; flex-direction: row">
    <RadzenLabel Text="Номер" />
    <RadzenNumeric Min="0" Placeholder="Номер" @bind-Value="_model.Number"/>
</div>

<div style="display: flex; flex-direction: row">
    <RadzenLabel Text="Адрес" />
    <RadzenTextBox Placeholder="Адрес" @bind-Value="_model.Street"/>
</div>

<div style="display: flex; flex-direction: row">
    <RadzenLabel Text="Температура" />
    <RadzenNumeric TValue="float" Step="0.1" Placeholder="Температура" @bind-Value="_model.Temperature"/>
</div>

<div style="display: flex; flex-direction: row">
    <RadzenLabel Text="Степень освещённости" />
    <RadzenNumeric TValue="float" Step="0.1" Placeholder="Степень освещённости" @bind-Value="_model.IlluminationDegree"/>
</div>

<div style="display: flex; flex-direction: row">
    <RadzenLabel Text="Статус" />
    <RadzenDropDown TValue="GreenhouseStatus" @bind-Value="_model.Status" Placeholder="Статус"
                    Data="Enum.GetValues(typeof(GreenhouseStatus)).Cast<GreenhouseStatus>().ToDictionary(t => t.ToString(), t => t)"
                    TextProperty="Key"
                    ValueProperty="Value"/>
</div>

<div style="display: flex; flex-direction: row">
    <RadzenLabel Text="Дополнительно" />
    <RadzenTextArea Placeholder="Дополнительно" @bind-Value="_model.AdditionalInfo"/>
</div>

<RadzenButton Click="@AddData" Text="Добавить" Style="width:200px" ButtonStyle="ButtonStyle.Primary" />

<RadzenDataGrid @ref="@_grid" Data="@_data" Count="@_count" TItem="Greenhouse" LoadData="@LoadData"
                Style="width: 80vw;" AllowColumnResize AllowFiltering AllowPaging ColumnWidth="300px" AllowSorting PageSize="5">
    <Columns>
         <RadzenDataGridColumn Frozen TItem="Greenhouse" Title="Действия">
            <Template Context="greenhouse">
                <RadzenButton Click="@(_ => EditGreenhouse(greenhouse))" Icon="input" ButtonStyle="ButtonStyle.Secondary"/>
                <RadzenButton Click="@(_ => DeleteGreenhouse(greenhouse))" Icon="highlight_off" ButtonStyle="ButtonStyle.Danger"/>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Frozen Width="50px" TItem="Greenhouse" Property="Id" Title="ID"/>
        <RadzenDataGridColumn Frozen Width="50px" TItem="Greenhouse" Property="Number" Title="Номер"/>
        <RadzenDataGridColumn TItem="Greenhouse" Property="Street" Title="Адрес"/>
        <RadzenDataGridColumn TItem="Greenhouse" Title="Команды с доступом">
            <Template Context="greenhouse">
                @string.Join(", ", greenhouse.TeamIds ?? new())
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Greenhouse" Property="Temperature" Title="Температура"/>
        <RadzenDataGridColumn TItem="Greenhouse" Property="IlluminationDegree" Title="Освещённость"/>
        <RadzenDataGridColumn TItem="Greenhouse" Property="AdditionalInfo" Title="Дополнительно"/>
        <RadzenDataGridColumn TItem="Greenhouse" Property="Status" Title="Статус"/>
        <RadzenDataGridColumn TItem="Greenhouse" Title="Высажено">
            <Template Context="greenhouse">
                @if (greenhouse.Plants is {} plants && plants.Any())
                {
                    @foreach (var plant in plants)
                    {
                        <p> Тип: @plant.Type </p>
                        <p> Сорт: @plant.Sort </p>
                        <p> Количество: @plant.Count </p>
                    }
                }
                else
                {
                    <p>Ничего не высажено</p>
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
@code{
    [Inject] ApplicationMongoContext MongoContext { get; set; }
    [Inject] DialogService DialogService { get; set; }
    
    private Greenhouse _model = new();
    private List<Greenhouse> _data = new();
    private int _count;
    private RadzenDataGrid<Greenhouse> _grid;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await _grid.Reload();
    }

    private void LoadData(LoadDataArgs args)
    {
        _data = MongoContext.Greenhouses.AsNoTracking().ToList();
        _count = _data.Count;
    }
    
    private async void AddData()
    {
        _model.Plants = new();
        _model.TeamIds = new();
        MongoContext.Greenhouses.Add(_model);
        await MongoContext.SaveChangesAsync();
        _model = new();
        await _grid.Reload();   
    }
    
    private void DeleteGreenhouse(Greenhouse item)
    {
        MongoContext.Greenhouses.Remove(item);
        MongoContext.SaveChangesAsync();
        _grid.Reload();
    }

    private async Task EditGreenhouse(Greenhouse model)
    {        
        DialogService.OnClose += EditClose;
        await DialogService.OpenAsync<EditGreenhouseDialog>("Редактировать",
            new Dictionary<string, object> { { "Greenhouse", model } });
    }

    private void EditClose(object? obj)
    {
        DialogService.OnClose -= EditClose;
        if (obj is null) return;
        _grid.Reload();
    }
}
